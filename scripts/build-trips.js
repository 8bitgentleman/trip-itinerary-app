const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

const TRIPS_DIR = path.join(__dirname, '../src/data/trips');
const OUTPUT_FILE = path.join(__dirname, '../src/data/trips.js');

function buildTrips() {
  try {
    // Check if trips directory exists
    if (!fs.existsSync(TRIPS_DIR)) {
      console.error(`Trips directory not found: ${TRIPS_DIR}`);
      process.exit(1);
    }

    // Read all YAML files from the trips directory
    const files = fs.readdirSync(TRIPS_DIR)
      .filter(file => file.endsWith('.yaml') || file.endsWith('.yml'))
      .sort(); // Sort for consistent ordering

    // Parse each YAML file
    const trips = [];
    const errors = [];
    
    for (const file of files) {
      const filePath = path.join(TRIPS_DIR, file);
      
      try {
        const yamlContent = fs.readFileSync(filePath, 'utf8');
        const trip = yaml.load(yamlContent);
        
        // Validate required fields
        if (!trip.id) {
          errors.push(`Missing required field 'id' in ${file}`);
          continue;
        }
        
        if (!trip.title) {
          errors.push(`Missing required field 'title' in ${file}`);
          continue;
        }

        trips.push(trip);
        
      } catch (error) {
        errors.push(`Error parsing ${file}: ${error.message}`);
      }
    }
    
    // Report any errors
    if (errors.length > 0) {
      console.error('❌ Errors found:');
      errors.forEach(error => console.error(`  ${error}`));
      process.exit(1);
    }

    // Generate the trips.js file
    const output = `// This file is auto-generated from YAML files in src/data/trips/
// Do not edit this file directly - edit the YAML files instead
// Run 'npm run build:trips' to regenerate this file

export const trips = ${JSON.stringify(trips, null, 2)};
`;

    fs.writeFileSync(OUTPUT_FILE, output, 'utf8');
    
    console.log(`✅ Built ${trips.length} trips from YAML files`);
    
  } catch (error) {
    console.error('❌ Error building trips:', error.message);
    process.exit(1);
  }
}

// Run the build
buildTrips();